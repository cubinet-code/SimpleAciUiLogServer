{"name":"SimpleAciUiLogServer","tagline":"A Simple HTTP server that acts as an APIC UI remote API Inspector.","body":"====================\r\nSimpleAciUiLogServer\r\n====================\r\n\r\nA Simple HTTP server that accepts POSTs from the APIC UI as a remote API\r\nInspector.\r\n\r\nThe simplest method to use this module is to execute it as a standalone script:\r\n\r\n```bash\r\n    $ SimpleAci\r\n    SimpleAciUiLogServer     SimpleAciUiLogServer.py\r\n    $ SimpleAciUiLogServer\r\n    serving at:\r\n    http://10.1.2.11:8987/apiinspector\r\n\r\n    08:17:14 DEBUG -\r\n      method: GET\r\n      url: http://10.1.2.1/api/subscriptionRefresh.json?id=72057843163791365\r\n      response: {\"imdata\":[]}\r\n\r\n    08:17:14 DEBUG -\r\n      method: GET\r\n      url: http://10.1.2.1/api/subscriptionRefresh.json?id=72057843163791488\r\n      response: {\"imdata\":[]}\r\n\r\n    08:17:14 DEBUG -\r\n      method: GET\r\n      url: http://10.1.2.1/api/subscriptionRefresh.json?id=72057843163791514\r\n      response: {\"imdata\":[]}\r\n```\r\n\r\nThe standalone script can be invoked using any of these commands:\r\n\r\n* SimpleAciUiLogServer\r\n* SimpleAciUiLogServer.py\r\n* acilogserv\r\n\r\nThe standalone script also allows you to set several options:\r\n\r\n* -a or --apicip: The IP address of an APIC or an IP address on the same subnet\r\n  as the APIC.  This allows the standalone server to be able to print the\r\n  correct IP address when it announces what IP address, port and location\r\n  it is listening on if the server is multi-homed.\r\n* -p or --port: The port the server should listen on.\r\n* -l or --location: The local path that the server should look for, anything\r\n  sent to the server outside of this location will result in the server\r\n  returinging a 404.  The default is /apiinspector\r\n* -r or --logrequests: This will cause the server to log a message about the\r\n  POST request to sys.stderr, the default is False, possible values are True and\r\n  False.\r\n\r\nWhen the module is run as a standalone script it simply prints the log messages\r\nto sys.stdout in a somewhat easy to read format.\r\n\r\nYou can also import the module and use it as a server as part of another\r\napplication.  This provides you with flexibility as it allows you to register\r\ncallback functions for each \"method\" found in the log message.  From this, you\r\ncould do things like use the data from the log message for other purposes or\r\nfilter out specific logs messages based on the \"method.\"  The methods that the\r\nAPIC uses are:\r\n\r\n* GET\r\n* POST\r\n* EventChannelMessage\r\n* undefined - NOTE: it seems like this method gets set for unknown reasons.\r\n  I need to investigate it more.\r\n\r\nExample:\r\n\r\n```python\r\n    >>>\r\n    >>> from SimpleAciUiLogServer.SimpleAciUiLogServer import \\\r\n    ... SimpleAciUiLogServer\r\n    >>> def GET(**kwargs):\r\n    ...     print \"Got a GET\"\r\n    ...\r\n    >>> def POST(**kwargs):\r\n    ...     print \"Kwargs/params: {0}\".format(kwargs)\r\n    ...\r\n    >>> server = SimpleAciUiLogServer((\"\", 8987), location='/acilogs')\r\n    >>> server.register_function(GET)\r\n    >>> server.register_function(POST)\r\n    >>> server.serve_forever()\r\n    Got a GET\r\n    Got a GET\r\n    08:50:52 DEBUG -\r\n      method: Event Channel Message\r\n      response: {\"subscriptionId\":[\"72057843163791520\",\"72057843163791488\",\r\n      \"72057843163791521\",\"72057843163791516\"],\"imdata\":[{\"fvTenant\":{\r\n      \"attributes\":{\"childAction\":\"\",\"dn\":\"uni/tn-mtimm-simple2\",\r\n      \"modTs\":\"2014-11-24T12:50:36.706-04:00\",\"rn\":\"\",\"status\":\"deleted\"}}}]}\r\n\r\n    08:50:53 DEBUG -\r\n      method: Event Channel Message\r\n      response: {\"subscriptionId\":[\"72057843163791523\"],\r\n      \"imdata\":[{\"fvRsTenantMonPol\":{\"attributes\":{\"childAction\":\"\",\r\n      \"dn\":\"uni/tn-mtimm-simple2/rsTenantMonPol\",\r\n      \"modTs\":\"2014-11-24T12:50:36.706-04:00\",\"rn\":\"\",\"status\":\"deleted\"}}}]}\r\n\r\n    Kwargs/params: {'data': {'url':\r\n    'http://10.1.2.1/api/node/mo/uni.json', 'response': '{\"imdata\":[]}',\r\n    'preamble': '08:50:53 DEBUG - ', 'method': 'POST', 'payload':\r\n    '{\"polUni\":{\"attributes\":{\"dn\":\"uni\",\"status\":\"modified\"},\r\n    \"children\":[{\"fvTenant\":{\"attributes\":{\"dn\":\"uni/tn-mtimm-simple2\",\r\n    \"status\":\"deleted\"},\"children\":[]}}]}}'}, 'layout': 'PatternLayout'}\r\n    Got a GET\r\n```\r\n\r\nNote that since there were no functions registered for the EventChannelMessage\r\nmethod, it went the default route which is to print info about the log message.\r\nHowever, both GET and POST have registered functions and they do different\r\nthings than the default dispatch action.\r\n\r\nIt is also possible to override the \\_dispatch method to create your own\r\ndispatch logic, for example rather than dispatch based on method maybe you\r\nwould like to dispatch based on subscription id.\r\n\r\nOnce the server is running, you can start remote logging from the APIC UI by\r\nselecting \"Start Remote Logging\" from the 'welcome, username' menu in the top\r\nright corner of the APIC UI.\r\n\r\n![Image of starting remote logging menu item](https://raw.githubusercontent.com/datacenter/SimpleAciUiLogServer/master/start_remote_logging.png)\r\n\r\nThen enter the URL the server is listening on:\r\n\r\n![Image of entering server URL](https://raw.githubusercontent.com/datacenter/SimpleAciUiLogServer/master/enter_remote_logging_info.png)\r\n\r\nIf you need to disable the remote logging from the APIC, you can do so from\r\nthe same menu and selecting 'Stop Remote Logging.'\r\n\r\n![Image of starting remote logging menu item](https://raw.githubusercontent.com/datacenter/SimpleAciUiLogServer/master/stop_remote_logging.png)\r\n\r\nLimitations: Does not support HTTPS/TLS at this time.\r\n\r\nWritten by @mtimm\r\n\r\nBased on code written by Fredrik Lundh & Brian Quinlan.\r\n ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}